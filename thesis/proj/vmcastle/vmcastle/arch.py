from archinfo.arch import Arch, Register, register_arch
from archinfo.types import Endness, RegisterOffset

# This file is autogenerated with the `arch-genesys` tool
# project name: vmcastle
# date: 2024-06-08T11:40:55.210350+00:00

class ArchVMCASTLE(Arch):

    memory_endness = Endness.LE
    bits = 32
    vex_arch = None
    name = "vmcastle"
    instruction_alignment = 2

    # registers is a dictionary mapping register names, to a tuple of
    # register offset, and their width, in bytes

    register_list = [
        Register(name="ip",
                 size=4,
                 vex_offset=0,
                 alias_names=['pc'],
                 ),
        
        Register(name="sp",
                 size=4,
                 vex_offset=4,
                 ),
        
        Register(name="sysnum",
                 size=4,
                 vex_offset=8,
                 ),
        
        Register(name="ip_at_syscall",
                 size=4,
                 vex_offset=16,
                 ),
        
        Register(name="r1",
                 size=4,
                 vex_offset=20,
                 ),
        
        Register(name="r2",
                 size=4,
                 vex_offset=24,
                 ),
        
        Register(name="r3",
                 size=4,
                 vex_offset=28,
                 ),
        
        Register(name="ac",
                 size=4,
                 vex_offset=32,
                 ),
        
        Register(name="reg_no",
                 size=1,
                 vex_offset=36,
                 ),
        ]

    ip_offset = RegisterOffset(0)
    sp_offset = RegisterOffset(1)

    def __init__(self, endness=Endness.LE):
        self.cs_mode = None
        super().__init__(Endness.LE)


register_arch(['vmcastle|VMCASTLE'], 32, Endness.LE, ArchVMCASTLE)