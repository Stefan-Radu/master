from cle.backends import Blob, register_backend
from archinfo import arch_from_id
import logging

log = logging.getLogger("cle.loader")

__all__ = ('{{archname.upper()}}',)

class {{archname.upper()}}(Blob):
    """
    Representation of a binary blob, i.e. an executable in an unknown file format.
    """
    is_default = True

    def __init__(self, *args, offset=3, **kwargs):
        """
        Loader backend for {{archname}} programs
        :param path: The file path
        :param offset: Skip this many bytes from the beginning of the file.
        :param entry_point: start
        """
        super({{archname.upper()}}, self).__init__(*args,
                arch=arch_from_id("{{archname}}"),
                offset=offset,
                entry_point={{entry_point}},
                base_addr={{base_addr}},
                **kwargs)
        self.os = "{{archname}}"

    @staticmethod
    def is_compatible(stream):
        stream.seek(0)
        stuff = stream.read({{offset}})
        header = bytes.fromhex(hex({{header}})[2:])
        if stuff == header:
            log.info(f"matched {{archname}}")
            return True
        log.info(f"{{archname}} NOT matched")
        return False

register_backend("{{archname}}", {{archname.upper()}})
