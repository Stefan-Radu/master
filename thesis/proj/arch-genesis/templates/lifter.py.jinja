import bitstring
from pyvex.lifting.util import *
from pyvex.lifting import register

import logging

log = logging.getLogger("{{arch.name}}.lifter")

{% set name = arch.name.upper() %}

# This file is autogenerated with the `arch-genesys` tool
# project name: {{arch.name}}
# date: {{datetime}}


# refferenced types
{% for key, val in lifter.types.items() -%}
{{key}} = Type.{{val}}
{% endfor %}

# refferenced registers
{% for reg_name, reg in arch.register_list.items() -%}
{{reg_name.upper()}}_REG = '{{reg_name}}'
{% endfor -%}

{%- set archname = arch.name.upper() -%}
{%- set intruction_class = archname + 'Instruction' -%}

# disassembly functions
{% for f, imp in lifter.disassemble_functions.items() %}
def disassemble_{{f}}(self):
    {{imp | indent}}
{% endfor %}

###################################################
# architecture instructions implementation in VEX #
###################################################

{% for op, data in lifter.opcodes.items() -%}
class Instruction_{{op.upper()}}(Instruction):
    bin_format = '{{data.bin_format}}'
    name = '{{op}}'
    description = '{{data.description}}'

    def compute_result(self, *args):
        {{data.behavior | indent(2 * 4,)}}

    def disassemble(self):
        {% if data.disassemble -%}
        return disassemble_{{data.disassemble}}(self)
        {%- else -%}
        return disassemble_{{lifter.defaults.disassemble}}(self)
        {%- endif %}

    {% for func in data.override -%}
    def {{func.method_name}}(self, 
    {%- for x in func.args -%}
    {{x}} {%- if not loop.last %} , {% endif %}
    {%- endfor -%}):
        {{ func.behavior | indent(2 * 4) }}
    {% endfor %}
{% endfor %}

# The instrs are matched against in this exact order
all_instrs = [
    {% for op in lifter.opcodes -%}
    Instruction_{{op.upper()}},    # {{loop.index}}
    {% endfor -%}
]

class Lifter{{name}}(GymratLifter):
    instrs = all_instrs

# Tell PyVEX that this lifter exists.
register(Lifter{{name}}, '{{arch.name}}')


# a simple disassembly function using the lifter
def disassemble(file_path, arch):
    lifter = Lifter{{name}}(arch, {{loader.base_addr}})

    with open(file_path, 'rb') as f:
        lifter.data = f.read()[{{loader.offset}}:]

    disassembly = []
    insts = lifter.disassemble()
    for addr, name, args, desc in insts:
        args_str = ", ".join(str(a) for a in args)
        dis_str = f"{addr:#06x}:  {name} {args_str}"
        if desc:
            dis_str += f"| {desc}"
        disassembly.append(dis_str)

    return "\n".join(disassembly)
