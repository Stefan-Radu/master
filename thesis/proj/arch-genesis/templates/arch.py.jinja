from archinfo.arch import Arch, Register, register_arch
from archinfo.types import Endness, RegisterOffset

# This file is autogenerated with the `arch-genesys` tool
# project name: {{name}}
# date: {{datetime}}

class Arch{{name.upper()}}(Arch):

    memory_endness = Endness.{{endness}}
    bits = {{bits}}
    vex_arch = None
    name = "{{name}}"
    instruction_alignment = {{instruction_alignment}}

    # registers is a dictionary mapping register names, to a tuple of
    # register offset, and their width, in bytes

    register_list = [
        {%- for key, reg in register_list.items() %}
        Register(name="{{key}}",
                 size={{reg.size}},
                 vex_offset={{reg.vex_offset}},
                 {% if reg.alias_names -%}
                 alias_names={{reg.alias_names}},
                 {% endif -%}),
        {% endfor -%}
    ]

    ip_offset = RegisterOffset({{ip_offset}})
    sp_offset = RegisterOffset({{sp_offset}})

    def __init__(self, endness=Endness.{{endness}}):
        self.cs_mode = None
        super().__init__(Endness.{{endness}})


register_arch(['{{name}}|{{name.upper()}}'], {{bits}}, Endness.{{endness}}, Arch{{name.upper()}})
